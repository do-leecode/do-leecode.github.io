<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>ArceOS</title>
      <link href="/2024/11/27/ArceOS/"/>
      <url>/2024/11/27/ArceOS/</url>
      
        <content type="html"><![CDATA[<h3 id="第一部分：环境配置"><a href="#第一部分：环境配置" class="headerlink" title="第一部分：环境配置"></a>第一部分：环境配置</h3><p>按照文档配置好开发环境，成功输出hello,world!</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust">官网链接：https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>rcore<span class="token operator">-</span>os<span class="token punctuation">.</span>cn<span class="token operator">/</span>arceos<span class="token operator">-</span>tutorial<span class="token operator">-</span>book项目地址：git clone git<span class="token operator">@</span>github<span class="token punctuation">.</span>com<span class="token punctuation">:</span>arceos<span class="token operator">-</span>org<span class="token operator">/</span>oscamp<span class="token punctuation">.</span>gitcd oscamp<span class="token operator">/</span>arceos<span class="token operator">/</span>git checkout <span class="token operator">-</span>b exercise验证环境是否正常：make pflash_imgmake disk_imgmake run<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="输出hello-world"><a href="#输出hello-world" class="headerlink" title="输出hello,world"></a>输出hello,world</h3><p><img src="/2024/11/27/ArceOS/hello.png" alt="hello"></p><h3 id="unikernel基本概念"><a href="#unikernel基本概念" class="headerlink" title="unikernel基本概念"></a>unikernel基本概念</h3><ul><li>应用与内核处于同一特权级</li><li>共享同一地址空间</li><li>编译形成一个Image一体运行</li></ul><h3 id="unikernel组件化开发演变"><a href="#unikernel组件化开发演变" class="headerlink" title="unikernel组件化开发演变"></a>unikernel组件化开发演变</h3><ul><li>直接开发一个裸机应用满足输出hello简单需求</li><li>需求增加，发现可按照通用性和Arch相关性实现软件代码的分层复用</li><li>引入组件化，降低耦合性，提升复用性、定制性、灵活性<br><img src="/2024/11/27/ArceOS/yanbian.png" alt="演变"><br><img src="/2024/11/27/ArceOS/yanbian2.png" alt="演变"></li></ul><h3 id="课后练习1：支持带颜色的打印输出"><a href="#课后练习1：支持带颜色的打印输出" class="headerlink" title="课后练习1：支持带颜色的打印输出"></a>课后练习1：支持带颜色的打印输出</h3><p>实现思路：修改axlog的lib.rs中的print_fmt方法如下：</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">print_fmt</span><span class="token punctuation">(</span>args<span class="token punctuation">:</span> <span class="token namespace">fmt<span class="token punctuation">::</span></span><span class="token class-name">Arguments</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token namespace">fmt<span class="token punctuation">::</span></span><span class="token class-name">Result</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">use</span> <span class="token namespace">kspin<span class="token punctuation">::</span></span><span class="token class-name">SpinNoIrq</span><span class="token punctuation">;</span> <span class="token comment">// TODO: more efficient</span>    <span class="token keyword">static</span> <span class="token constant">LOCK</span><span class="token punctuation">:</span> <span class="token class-name">SpinNoIrq</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token class-name">SpinNoIrq</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> _guard <span class="token operator">=</span> <span class="token constant">LOCK</span><span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Logger</span><span class="token punctuation">.</span><span class="token function">write_fmt</span><span class="token punctuation">(</span><span class="token macro property">with_color!</span><span class="token punctuation">(</span><span class="token class-name">ColorCode</span><span class="token punctuation">::</span><span class="token class-name">Green</span><span class="token punctuation">,</span><span class="token string">"&#123;&#125;"</span><span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修改ulib&#x2F;axstd&#x2F;src&#x2F;io&#x2F;stdio.rs中的__print_impl方法：</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token macro property">macro_rules!</span> with_color <span class="token punctuation">&#123;</span>    <span class="token punctuation">(</span><span class="token variable">$color_code</span><span class="token punctuation">:</span><span class="token fragment-specifier punctuation">expr</span><span class="token punctuation">,</span> $<span class="token punctuation">(</span><span class="token variable">$arg</span><span class="token punctuation">:</span><span class="token fragment-specifier punctuation">tt</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>        <span class="token macro property">format_args!</span><span class="token punctuation">(</span><span class="token string">"\u&#123;1B&#125;[&#123;&#125;m&#123;&#125;\u&#123;1B&#125;[m"</span><span class="token punctuation">,</span> <span class="token variable">$color_code</span> <span class="token keyword">as</span> <span class="token keyword">u8</span><span class="token punctuation">,</span> <span class="token macro property">format_args!</span><span class="token punctuation">(</span>$<span class="token punctuation">(</span><span class="token variable">$arg</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token attribute attr-name">#[doc(hidden)]</span><span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">__print_impl</span><span class="token punctuation">(</span>args<span class="token punctuation">:</span> <span class="token namespace">core<span class="token punctuation">::</span>fmt<span class="token punctuation">::</span></span><span class="token class-name">Arguments</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token macro property">cfg!</span><span class="token punctuation">(</span>feature <span class="token operator">=</span> <span class="token string">"smp"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// synchronize using the lock in axlog, to avoid interleaving</span>        <span class="token comment">// with kernel logs</span>        <span class="token namespace">arceos_api<span class="token punctuation">::</span>stdio<span class="token punctuation">::</span></span><span class="token function">ax_console_write_fmt</span><span class="token punctuation">(</span><span class="token macro property">with_color!</span><span class="token punctuation">(</span><span class="token number">34</span><span class="token punctuation">,</span><span class="token string">"&#123;&#125;"</span><span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token function">stdout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write_fmt</span><span class="token punctuation">(</span><span class="token macro property">with_color!</span><span class="token punctuation">(</span><span class="token number">34</span><span class="token punctuation">,</span><span class="token string">"&#123;&#125;"</span><span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里我设置打印颜色为蓝色，所以设置为34。<br>颜色枚举如下：</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">enum</span> <span class="token type-definition class-name">ColorCode</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Black</span> <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">,</span>    <span class="token class-name">Red</span> <span class="token operator">=</span> <span class="token number">31</span><span class="token punctuation">,</span>    <span class="token class-name">Green</span> <span class="token operator">=</span> <span class="token number">32</span><span class="token punctuation">,</span>    <span class="token class-name">Yellow</span> <span class="token operator">=</span> <span class="token number">33</span><span class="token punctuation">,</span>    <span class="token class-name">Blue</span> <span class="token operator">=</span> <span class="token number">34</span><span class="token punctuation">,</span>    <span class="token class-name">Magenta</span> <span class="token operator">=</span> <span class="token number">35</span><span class="token punctuation">,</span>    <span class="token class-name">Cyan</span> <span class="token operator">=</span> <span class="token number">36</span><span class="token punctuation">,</span>    <span class="token class-name">White</span> <span class="token operator">=</span> <span class="token number">37</span><span class="token punctuation">,</span>    <span class="token class-name">BrightBlack</span> <span class="token operator">=</span> <span class="token number">90</span><span class="token punctuation">,</span>    <span class="token class-name">BrightRed</span> <span class="token operator">=</span> <span class="token number">91</span><span class="token punctuation">,</span>    <span class="token class-name">BrightGreen</span> <span class="token operator">=</span> <span class="token number">92</span><span class="token punctuation">,</span>    <span class="token class-name">BrightYellow</span> <span class="token operator">=</span> <span class="token number">93</span><span class="token punctuation">,</span>    <span class="token class-name">BrightBlue</span> <span class="token operator">=</span> <span class="token number">94</span><span class="token punctuation">,</span>    <span class="token class-name">BrightMagenta</span> <span class="token operator">=</span> <span class="token number">95</span><span class="token punctuation">,</span>    <span class="token class-name">BrightCyan</span> <span class="token operator">=</span> <span class="token number">96</span><span class="token punctuation">,</span>    <span class="token class-name">BrightWhite</span> <span class="token operator">=</span> <span class="token number">97</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2024/11/27/ArceOS/color.png" alt="color"></p><h3 id="第二部分：支持动态内存分配"><a href="#第二部分：支持动态内存分配" class="headerlink" title="第二部分：支持动态内存分配"></a>第二部分：支持动态内存分配</h3><h3 id="课后练习2"><a href="#课后练习2" class="headerlink" title="课后练习2"></a>课后练习2</h3>]]></content>
      
      
      <categories>
          
          <category> 操作系统 </category>
          
          <category> ArceOS </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>有效的括号</title>
      <link href="/2024/11/24/%E6%9C%89%E6%95%88%E7%9A%84%E6%8B%AC%E5%8F%B7/"/>
      <url>/2024/11/24/%E6%9C%89%E6%95%88%E7%9A%84%E6%8B%AC%E5%8F%B7/</url>
      
        <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一个只包括 ‘(‘，’)’，’{‘，’}’，’[‘，’]’ 的字符串 s ，判断字符串是否有效。<br>有效字符串需满足：</p><ul><li>左括号必须用相同类型的右括号闭合。</li><li>左括号必须以正确的顺序闭合。</li><li>每个右括号都有一个对应的相同类型的左括号。</li></ul><h3 id="示例-1："><a href="#示例-1：" class="headerlink" title="示例 1："></a>示例 1：</h3><p>输入：s &#x3D; “()”<br>输出：true</p><h3 id="示例-2："><a href="#示例-2：" class="headerlink" title="示例 2："></a>示例 2：</h3><p>输入：s &#x3D; “()[]{}”<br>输出：true</p><h3 id="示例-3："><a href="#示例-3：" class="headerlink" title="示例 3："></a>示例 3：</h3><p>输入：s &#x3D; “(]”<br>输出：false</p><h3 id="示例-4："><a href="#示例-4：" class="headerlink" title="示例 4："></a>示例 4：</h3><p>输入：s &#x3D; “([])”<br>输出：true</p><h3 id="提示："><a href="#提示：" class="headerlink" title="提示："></a>提示：</h3><ul><li>1 &lt;&#x3D; s.length &lt;&#x3D; 104</li><li>s 仅由括号 ‘()[]{}’ 组成</li></ul><h3 id="rust代码"><a href="#rust代码" class="headerlink" title="rust代码"></a>rust代码</h3><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">is_valid</span><span class="token punctuation">(</span>s<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token keyword">bool</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> <span class="token keyword">mut</span> stack<span class="token punctuation">:</span> <span class="token class-name">VecDeque</span><span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token class-name">VecDeque</span><span class="token punctuation">::</span><span class="token function">with_capacity</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>_<span class="token punctuation">,</span> c<span class="token punctuation">)</span> <span class="token keyword">in</span> s<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">char_indices</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> c <span class="token operator">==</span> <span class="token char">'['</span> <span class="token operator">||</span> c <span class="token operator">==</span> <span class="token char">'&#123;'</span> <span class="token operator">||</span> c <span class="token operator">==</span> <span class="token char">'('</span> <span class="token punctuation">&#123;</span>            stack<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> c <span class="token operator">==</span> <span class="token char">']'</span> <span class="token operator">||</span> c <span class="token operator">==</span> <span class="token char">'&#125;'</span> <span class="token operator">||</span> c <span class="token operator">==</span> <span class="token char">')'</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> stack<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token function">is_match</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> stack<span class="token punctuation">.</span><span class="token function">is_empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token boolean">true</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>        <span class="token boolean">false</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">fn</span> <span class="token function-definition function">is_match</span><span class="token punctuation">(</span>c1<span class="token punctuation">:</span> <span class="token keyword">char</span><span class="token punctuation">,</span> c2<span class="token punctuation">:</span> <span class="token keyword">char</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token keyword">bool</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> index1 <span class="token operator">=</span> <span class="token string">"([&#123;"</span><span class="token punctuation">.</span><span class="token function">chars</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">into_iter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">position</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>e<span class="token closure-punctuation punctuation">|</span></span> e <span class="token operator">==</span> c1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> index2 <span class="token operator">=</span> <span class="token string">")]&#125;"</span><span class="token punctuation">.</span><span class="token function">chars</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">into_iter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">position</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>e<span class="token closure-punctuation punctuation">|</span></span> e <span class="token operator">==</span> c2<span class="token punctuation">)</span><span class="token punctuation">;</span>    index1 <span class="token operator">==</span> index2<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2024/11/24/%E6%9C%89%E6%95%88%E7%9A%84%E6%8B%AC%E5%8F%B7/rust.png" alt="rust"></p>]]></content>
      
      
      <categories>
          
          <category> leecode </category>
          
          <category> 栈 </category>
          
          <category> 0020:有效的括号 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微信公众号:三角兽 </tag>
            
            <tag> 知识星球:Offer快来 </tag>
            
            <tag> 栈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>删除链表的倒数N个节点</title>
      <link href="/2024/11/24/%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E7%9A%84%E5%80%92%E6%95%B0N%E4%B8%AA%E8%8A%82%E7%82%B9/"/>
      <url>/2024/11/24/%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E7%9A%84%E5%80%92%E6%95%B0N%E4%B8%AA%E8%8A%82%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给你一个链表，删除链表的倒数第 n 个结点，并且返回链表的头结点。</p><h3 id="示例-1："><a href="#示例-1：" class="headerlink" title="示例 1："></a>示例 1：</h3><p><img src="/2024/11/24/%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E7%9A%84%E5%80%92%E6%95%B0N%E4%B8%AA%E8%8A%82%E7%82%B9/remove_ex1.jpg" alt="example1"><br>输入：head &#x3D; [1,2,3,4,5], n &#x3D; 2<br>输出：[1,2,3,5]</p><h3 id="示例-2："><a href="#示例-2：" class="headerlink" title="示例 2："></a>示例 2：</h3><p>输入：head &#x3D; [1], n &#x3D; 1<br>输出：[]</p><h3 id="示例-3："><a href="#示例-3：" class="headerlink" title="示例 3："></a>示例 3：</h3><p>输入：head &#x3D; [1,2], n &#x3D; 1<br>输出：[1]</p><h3 id="提示："><a href="#提示：" class="headerlink" title="提示："></a>提示：</h3><p>链表中结点的数目为 sz<br>1 &lt;&#x3D; sz &lt;&#x3D; 30<br>0 &lt;&#x3D; Node.val &lt;&#x3D; 100<br>1 &lt;&#x3D; n &lt;&#x3D; sz</p><p>进阶：你能尝试使用一趟扫描实现吗？</p><h3 id="rust-实现1"><a href="#rust-实现1" class="headerlink" title="rust 实现1"></a>rust 实现1</h3><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token comment">/// 先计算长度L+删除L-n处的节点</span><span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">remove_nth_from_end</span><span class="token punctuation">(</span><span class="token keyword">mut</span> head<span class="token punctuation">:</span> <span class="token class-name">Option</span><span class="token operator">&lt;</span><span class="token class-name">Box</span><span class="token operator">&lt;</span><span class="token class-name">ListNode</span><span class="token operator">>></span><span class="token punctuation">,</span> n<span class="token punctuation">:</span> <span class="token keyword">i32</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Option</span><span class="token operator">&lt;</span><span class="token class-name">Box</span><span class="token operator">&lt;</span><span class="token class-name">ListNode</span><span class="token operator">>></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> <span class="token keyword">mut</span> len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> <span class="token keyword">mut</span> p <span class="token operator">=</span> head<span class="token punctuation">.</span><span class="token function">as_ref</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 找出链表的长度len</span>    <span class="token keyword">while</span> p<span class="token punctuation">.</span><span class="token function">is_some</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        len <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>        p <span class="token operator">=</span> <span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>next<span class="token punctuation">.</span><span class="token function">as_ref</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 删除倒数n个节点，等于正向删除len-n+1个节点，即len-n个节点指向len-n+1个节点之后的节点</span>    <span class="token keyword">let</span> <span class="token keyword">mut</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> <span class="token keyword">mut</span> p <span class="token operator">=</span> head<span class="token punctuation">.</span><span class="token function">as_mut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> len <span class="token operator">-</span> n <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> p<span class="token punctuation">.</span>next<span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">while</span> i <span class="token operator">&lt;</span> len <span class="token operator">-</span> n <span class="token operator">-</span> <span class="token number">1</span> <span class="token punctuation">&#123;</span>        i <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>        p <span class="token operator">=</span> p<span class="token punctuation">.</span>next<span class="token punctuation">.</span><span class="token function">as_mut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    p<span class="token punctuation">.</span>next <span class="token operator">=</span> p<span class="token punctuation">.</span>next<span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>next<span class="token punctuation">;</span>    head<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2024/11/24/%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E7%9A%84%E5%80%92%E6%95%B0N%E4%B8%AA%E8%8A%82%E7%82%B9/rust.png" alt="rust"></p>]]></content>
      
      
      <categories>
          
          <category> leecode </category>
          
          <category> 链表 </category>
          
          <category> 0019:删除链表的倒数N个节点 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微信公众号:三角兽 </tag>
            
            <tag> 知识星球:Offer快来 </tag>
            
            <tag> 链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>四数之和</title>
      <link href="/2024/11/24/%E5%9B%9B%E6%95%B0%E4%B9%8B%E5%92%8C/"/>
      <url>/2024/11/24/%E5%9B%9B%E6%95%B0%E4%B9%8B%E5%92%8C/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>电话号码的字母组合</title>
      <link href="/2024/11/24/%E7%94%B5%E8%AF%9D%E5%8F%B7%E7%A0%81%E7%9A%84%E5%AD%97%E6%AF%8D%E7%BB%84%E5%90%88/"/>
      <url>/2024/11/24/%E7%94%B5%E8%AF%9D%E5%8F%B7%E7%A0%81%E7%9A%84%E5%AD%97%E6%AF%8D%E7%BB%84%E5%90%88/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>最接近的三数之和</title>
      <link href="/2024/11/24/%E6%9C%80%E6%8E%A5%E8%BF%91%E7%9A%84%E4%B8%89%E6%95%B0%E4%B9%8B%E5%92%8C/"/>
      <url>/2024/11/24/%E6%9C%80%E6%8E%A5%E8%BF%91%E7%9A%84%E4%B8%89%E6%95%B0%E4%B9%8B%E5%92%8C/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>三数之和</title>
      <link href="/2024/11/24/%E4%B8%89%E6%95%B0%E4%B9%8B%E5%92%8C/"/>
      <url>/2024/11/24/%E4%B8%89%E6%95%B0%E4%B9%8B%E5%92%8C/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>最长公共前缀</title>
      <link href="/2024/11/24/%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1%E5%89%8D%E7%BC%80/"/>
      <url>/2024/11/24/%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1%E5%89%8D%E7%BC%80/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>数字转罗马数字</title>
      <link href="/2024/11/24/%E6%95%B0%E5%AD%97%E8%BD%AC%E7%BD%97%E9%A9%AC%E6%95%B0%E5%AD%97/"/>
      <url>/2024/11/24/%E6%95%B0%E5%AD%97%E8%BD%AC%E7%BD%97%E9%A9%AC%E6%95%B0%E5%AD%97/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>盛最多水的容器</title>
      <link href="/2024/11/24/%E7%9B%9B%E6%9C%80%E5%A4%9A%E6%B0%B4%E7%9A%84%E5%AE%B9%E5%99%A8/"/>
      <url>/2024/11/24/%E7%9B%9B%E6%9C%80%E5%A4%9A%E6%B0%B4%E7%9A%84%E5%AE%B9%E5%99%A8/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>正则表达式匹配</title>
      <link href="/2024/11/24/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%8C%B9%E9%85%8D/"/>
      <url>/2024/11/24/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%8C%B9%E9%85%8D/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>回文数</title>
      <link href="/2024/11/24/%E5%9B%9E%E6%96%87%E6%95%B0/"/>
      <url>/2024/11/24/%E5%9B%9E%E6%96%87%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给你一个整数 x ，如果 x 是一个回文整数，返回 true ；否则，返回 false 。<br>回文数：是指正序（从左向右）和倒序（从右向左）读都是一样的整数。<br>例如，121 是回文，而 123 不是。</p><h3 id="示例-1："><a href="#示例-1：" class="headerlink" title="示例 1："></a>示例 1：</h3><p>输入：x &#x3D; 121<br>输出：true</p><h3 id="示例-2："><a href="#示例-2：" class="headerlink" title="示例 2："></a>示例 2：</h3><p>输入：x &#x3D; -121<br>输出：false<br>解释：从左向右读, 为 -121 。 从右向左读, 为 121- 。因此它不是一个回文数。</p><h3 id="示例-3："><a href="#示例-3：" class="headerlink" title="示例 3："></a>示例 3：</h3><p>输入：x &#x3D; 10<br>输出：false<br>解释：从右向左读, 为 01 。因此它不是一个回文数。</p><h3 id="提示："><a href="#提示：" class="headerlink" title="提示："></a>提示：</h3><p>-2^31 &lt;&#x3D; x &lt;&#x3D; 2^31 - 1<br>进阶：你能不将整数转为字符串来解决这个问题吗？</p><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>本题比较简单，可以有多种解法，最简单的解法是将数字转换为字符串，字符串反转比较。空间复杂度为O(n)<br>本例提供另外两种优化处理的算：分别是头尾判断法和整数反转法。空间复杂度为O(1),时间复杂度为O(log10n)</p><h3 id="基于字符串的解法"><a href="#基于字符串的解法" class="headerlink" title="基于字符串的解法"></a>基于字符串的解法</h3><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token comment">/// 转换为字符串</span><span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">is_palindrome</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token keyword">i32</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token keyword">bool</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> s_x <span class="token operator">=</span> x<span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//s_x.chars().rev().collect::&lt;Vec&lt;char>>() == s_x.chars().collect::&lt;Vec&lt;char>>()</span>    s_x<span class="token punctuation">.</span><span class="token function">chars</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">rev</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">::</span><span class="token operator">&lt;</span><span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">>></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> s_x<span class="token punctuation">.</span><span class="token function">chars</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">::</span><span class="token operator">&lt;</span><span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">>></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2024/11/24/%E5%9B%9E%E6%96%87%E6%95%B0/rust1.png" alt="rust1"></p><h3 id="头尾比较判断法"><a href="#头尾比较判断法" class="headerlink" title="头尾比较判断法"></a>头尾比较判断法</h3><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token comment">/// 不借助字符串 双指针思路</span><span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">is_palindrome1</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token keyword">i32</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token keyword">bool</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 确定位数</span>    <span class="token keyword">let</span> <span class="token keyword">mut</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> <span class="token punctuation">(</span><span class="token keyword">mut</span> y<span class="token punctuation">,</span> <span class="token keyword">mut</span> z<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> x <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> x <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> x <span class="token operator">&lt;=</span> <span class="token number">9</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">while</span> y <span class="token operator">></span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>        y <span class="token operator">/=</span> <span class="token number">10</span><span class="token punctuation">;</span>        n <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">while</span> n <span class="token operator">></span> <span class="token number">1</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> z <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> z <span class="token operator">&lt;=</span> <span class="token number">9</span> <span class="token operator">&amp;&amp;</span> n <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> z <span class="token operator">/</span> <span class="token number">10i32</span><span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">!=</span> z <span class="token operator">%</span> <span class="token number">10</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        z <span class="token operator">=</span> <span class="token punctuation">(</span>z <span class="token operator">%</span> <span class="token number">10i32</span><span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">;</span>        n <span class="token operator">-=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token boolean">true</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2024/11/24/%E5%9B%9E%E6%96%87%E6%95%B0/rust2.png" alt="rust2"></p><h3 id="数字反转法"><a href="#数字反转法" class="headerlink" title="数字反转法"></a>数字反转法</h3><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token comment">/// 不借助字符串 数字反转思路</span><span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">is_palindrome2</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token keyword">i32</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token keyword">bool</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> <span class="token keyword">mut</span> xx <span class="token operator">=</span> x<span class="token punctuation">;</span>    <span class="token keyword">if</span> x <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> x <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> x <span class="token operator">&lt;=</span> <span class="token number">9</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">let</span> <span class="token keyword">mut</span> tmp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> xx <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">&#123;</span>        tmp <span class="token operator">=</span> tmp <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> xx <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token comment">// 判断溢出</span>        <span class="token keyword">if</span> tmp <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">!=</span> xx<span class="token operator">%</span><span class="token number">10</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        xx <span class="token operator">/=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token macro property">tmp!</span><span class="token operator">=</span> x<span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token boolean">true</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2024/11/24/%E5%9B%9E%E6%96%87%E6%95%B0/rust3.png" alt="rust3"></p>]]></content>
      
      
      <categories>
          
          <category> leecode </category>
          
          <category> 数字处理 </category>
          
          <category> 0009:回文数 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微信公众号:三角兽 </tag>
            
            <tag> 知识星球:Offer快来 </tag>
            
            <tag> 数字处理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>字符串转整数(atoi)</title>
      <link href="/2024/11/24/%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BD%AC%E6%95%B4%E6%95%B0-atoi/"/>
      <url>/2024/11/24/%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BD%AC%E6%95%B4%E6%95%B0-atoi/</url>
      
        <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>请你来实现一个 myAtoi(string s) 函数，使其能将字符串转换成一个 32 位有符号整数。<br>函数 myAtoi(string s) 的算法如下：</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust">空格：读入字符串并丢弃无用的前导空格（<span class="token string">" "</span>）符号：检查下一个字符（假设还未到字符末尾）为 <span class="token char">'-'</span> 还是 <span class="token char">'+'</span>。如果两者都不存在，则假定结果为正。转换：通过跳过前置零来读取该整数，直到遇到非数字字符或到达字符串的结尾。如果没有读取数字，则结果为<span class="token number">0</span>。舍入：如果整数数超过 <span class="token number">32</span> 位有符号整数范围 <span class="token punctuation">[</span>−<span class="token number">231</span><span class="token punctuation">,</span>  <span class="token number">231</span> − <span class="token number">1</span><span class="token punctuation">]</span> ，需要截断这个整数，使其保持在这个范围内。具体来说，小于 −<span class="token number">231</span> 的整数应该被舍入为 −<span class="token number">231</span> ，大于 <span class="token number">231</span> − <span class="token number">1</span> 的整数应该被舍入为 <span class="token number">231</span> − <span class="token number">1</span> 。返回整数作为最终结果。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id><a href="#" class="headerlink" title></a></h3><p>示例 1：<br>输入：s &#x3D; “42”<br>输出：42<br>解释：加粗的字符串为已经读入的字符，插入符号是当前读取的字符。<br>带下划线线的字符是所读的内容，插入符号是当前读入位置。</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust">第 <span class="token number">1</span> 步：<span class="token string">"42"</span>（当前没有读入字符，因为没有前导空格）         <span class="token operator">^</span>第 <span class="token number">2</span> 步：<span class="token string">"42"</span>（当前没有读入字符，因为这里不存在 <span class="token char">'-'</span> 或者 <span class="token char">'+'</span>）         <span class="token operator">^</span>第 <span class="token number">3</span> 步：<span class="token string">"42"</span>（读入 <span class="token string">"42"</span>）           <span class="token operator">^</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="示例-2："><a href="#示例-2：" class="headerlink" title="示例 2："></a>示例 2：</h3><p>输入：s &#x3D; “ -042”<br>输出：-42<br>解释：</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust">第 <span class="token number">1</span> 步：<span class="token string">"   -042"</span>（读入前导空格，但忽视掉）            <span class="token operator">^</span>第 <span class="token number">2</span> 步：<span class="token string">"   -042"</span>（读入 <span class="token char">'-'</span> 字符，所以结果应该是负数）             <span class="token operator">^</span>第 <span class="token number">3</span> 步：<span class="token string">"   -042"</span>（读入 <span class="token string">"042"</span>，在结果中忽略前导零）               <span class="token operator">^</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="示例-3："><a href="#示例-3：" class="headerlink" title="示例 3："></a>示例 3：</h3><p>输入：s &#x3D; “1337c0d3”<br>输出：1337<br>解释：</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust">第 <span class="token number">1</span> 步：<span class="token string">"1337c0d3"</span>（当前没有读入字符，因为没有前导空格）         <span class="token operator">^</span>第 <span class="token number">2</span> 步：<span class="token string">"1337c0d3"</span>（当前没有读入字符，因为这里不存在 <span class="token char">'-'</span> 或者 <span class="token char">'+'</span>）         <span class="token operator">^</span>第 <span class="token number">3</span> 步：<span class="token string">"1337c0d3"</span>（读入 <span class="token string">"1337"</span>；由于下一个字符不是一个数字，所以读入停止）             <span class="token operator">^</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="示例-4："><a href="#示例-4：" class="headerlink" title="示例 4："></a>示例 4：</h3><p>输入：s &#x3D; “0-1”<br>输出：0<br>解释：</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust">第 <span class="token number">1</span> 步：<span class="token string">"0-1"</span> <span class="token punctuation">(</span>当前没有读入字符，因为没有前导空格<span class="token punctuation">)</span>         <span class="token operator">^</span>第 <span class="token number">2</span> 步：<span class="token string">"0-1"</span> <span class="token punctuation">(</span>当前没有读入字符，因为这里不存在 <span class="token char">'-'</span> 或者 <span class="token char">'+'</span><span class="token punctuation">)</span>         <span class="token operator">^</span>第 <span class="token number">3</span> 步：<span class="token string">"0-1"</span> <span class="token punctuation">(</span>读入 <span class="token string">"0"</span>；由于下一个字符不是一个数字，所以读入停止<span class="token punctuation">)</span>          <span class="token operator">^</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="示例-5："><a href="#示例-5：" class="headerlink" title="示例 5："></a>示例 5：</h3><p>输入：s &#x3D; “words and 987”<br>输出：0<br>解释：<br>读取在第一个非数字字符“w”处停止。</p><h3 id="提示："><a href="#提示：" class="headerlink" title="提示："></a>提示：</h3><p>0 &lt;&#x3D; s.length &lt;&#x3D; 200<br>s 由英文字母（大写和小写）、数字（0-9）、’ ‘、’+’、’-‘ 和 ‘.’ 组成</p><h3 id="rust实现"><a href="#rust实现" class="headerlink" title="rust实现"></a>rust实现</h3><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">my_atoi</span><span class="token punctuation">(</span>s<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token keyword">i32</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> <span class="token keyword">mut</span> nums<span class="token punctuation">:</span> <span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token keyword">i32</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token class-name">Vec</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> <span class="token keyword">mut</span> neg_flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> <span class="token keyword">mut</span> front_not_zero <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token punctuation">,</span> c<span class="token punctuation">)</span> <span class="token keyword">in</span> s<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">char_indices</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token char">'-'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            neg_flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token char">'-'</span> <span class="token operator">||</span> c <span class="token operator">==</span> <span class="token char">'+'</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token char">'-'</span> <span class="token operator">||</span> c <span class="token operator">==</span> <span class="token char">'+'</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> c <span class="token operator">></span> <span class="token char">'0'</span> <span class="token operator">&amp;&amp;</span> c <span class="token operator">&lt;=</span> <span class="token char">'9'</span> <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>            front_not_zero <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> c <span class="token operator">>=</span> <span class="token char">'0'</span> <span class="token operator">&amp;&amp;</span> c <span class="token operator">&lt;=</span> <span class="token char">'9'</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> front_not_zero <span class="token punctuation">&#123;</span>                nums<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">to_digit</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token keyword">i32</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">let</span> <span class="token keyword">mut</span> res<span class="token punctuation">:</span> <span class="token keyword">i32</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token punctuation">,</span> v<span class="token punctuation">)</span> <span class="token keyword">in</span> nums<span class="token punctuation">.</span><span class="token function">iter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">rev</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">enumerate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">rev</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> <span class="token keyword">mut</span> v <span class="token operator">=</span> <span class="token operator">*</span>v<span class="token punctuation">;</span>        <span class="token keyword">if</span> neg_flag <span class="token punctuation">&#123;</span>            v <span class="token operator">=</span> <span class="token operator">-</span>v<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        res <span class="token operator">=</span> res<span class="token punctuation">.</span><span class="token function">wrapping_add</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">wrapping_mul</span><span class="token punctuation">(</span><span class="token number">10i32</span><span class="token punctuation">.</span><span class="token function">wrapping_pow</span><span class="token punctuation">(</span>i <span class="token keyword">as</span> <span class="token keyword">u32</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> t <span class="token operator">=</span> <span class="token number">10i32</span><span class="token punctuation">.</span><span class="token function">wrapping_pow</span><span class="token punctuation">(</span>i <span class="token keyword">as</span> <span class="token keyword">u32</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> t <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token punctuation">(</span>res <span class="token operator">/</span> t<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">!=</span> v <span class="token punctuation">&#123;</span>            <span class="token comment">// 溢出</span>            <span class="token keyword">if</span> neg_flag <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token keyword">i32</span><span class="token punctuation">::</span><span class="token constant">MIN</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token keyword">i32</span><span class="token punctuation">::</span><span class="token constant">MAX</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    res<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2024/11/24/%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BD%AC%E6%95%B4%E6%95%B0-atoi/rust.png" alt="rust"></p><h3 id="使用有限状态机状态机"><a href="#使用有限状态机状态机" class="headerlink" title="使用有限状态机状态机"></a>使用有限状态机状态机</h3><p>这是官方推荐的方法，更具普适性，适用于各种限制条件很多的情况。</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">fn</span> <span class="token function-definition function">my_atoi2</span><span class="token punctuation">(</span>s<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token keyword">i32</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 基于状态机的转化</span>    <span class="token comment">// 定义状态机 状态机基于输入的字符而改变当前的状态，这些字符包括：'' -/+ number other</span>    <span class="token keyword">let</span> <span class="token keyword">mut</span> state_marchine<span class="token punctuation">:</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token class-name">State</span><span class="token punctuation">,</span> <span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token class-name">State</span><span class="token operator">>></span> <span class="token operator">=</span> <span class="token class-name">HashMap</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> <span class="token keyword">mut</span> current_state <span class="token operator">=</span> <span class="token class-name">State</span><span class="token punctuation">::</span><span class="token constant">START</span><span class="token punctuation">;</span>    state_marchine<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>        <span class="token class-name">State</span><span class="token punctuation">::</span><span class="token constant">START</span><span class="token punctuation">,</span>        <span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token class-name">State</span><span class="token punctuation">::</span><span class="token constant">START</span><span class="token punctuation">,</span> <span class="token class-name">State</span><span class="token punctuation">::</span><span class="token constant">INSIGN</span><span class="token punctuation">,</span> <span class="token class-name">State</span><span class="token punctuation">::</span><span class="token constant">INNUMBER</span><span class="token punctuation">,</span> <span class="token class-name">State</span><span class="token punctuation">::</span><span class="token constant">END</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>    state_marchine<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>        <span class="token class-name">State</span><span class="token punctuation">::</span><span class="token constant">INSIGN</span><span class="token punctuation">,</span>        <span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token class-name">State</span><span class="token punctuation">::</span><span class="token constant">END</span><span class="token punctuation">,</span> <span class="token class-name">State</span><span class="token punctuation">::</span><span class="token constant">END</span><span class="token punctuation">,</span> <span class="token class-name">State</span><span class="token punctuation">::</span><span class="token constant">INNUMBER</span><span class="token punctuation">,</span> <span class="token class-name">State</span><span class="token punctuation">::</span><span class="token constant">END</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>    state_marchine<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>        <span class="token class-name">State</span><span class="token punctuation">::</span><span class="token constant">INNUMBER</span><span class="token punctuation">,</span>        <span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token class-name">State</span><span class="token punctuation">::</span><span class="token constant">END</span><span class="token punctuation">,</span> <span class="token class-name">State</span><span class="token punctuation">::</span><span class="token constant">END</span><span class="token punctuation">,</span> <span class="token class-name">State</span><span class="token punctuation">::</span><span class="token constant">INNUMBER</span><span class="token punctuation">,</span> <span class="token class-name">State</span><span class="token punctuation">::</span><span class="token constant">END</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>    state_marchine<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>        <span class="token class-name">State</span><span class="token punctuation">::</span><span class="token constant">END</span><span class="token punctuation">,</span>        <span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token class-name">State</span><span class="token punctuation">::</span><span class="token constant">END</span><span class="token punctuation">,</span> <span class="token class-name">State</span><span class="token punctuation">::</span><span class="token constant">END</span><span class="token punctuation">,</span> <span class="token class-name">State</span><span class="token punctuation">::</span><span class="token constant">END</span><span class="token punctuation">,</span> <span class="token class-name">State</span><span class="token punctuation">::</span><span class="token constant">END</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> <span class="token keyword">mut</span> result<span class="token punctuation">:</span> <span class="token keyword">i64</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> <span class="token keyword">mut</span> neg_flag<span class="token punctuation">:</span> <span class="token keyword">i64</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> c <span class="token keyword">in</span> s<span class="token punctuation">.</span><span class="token function">chars</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        current_state <span class="token operator">=</span> state_marchine<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>current_state<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token function">get_state</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>c<span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token keyword">usize</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> current_state <span class="token operator">==</span> <span class="token class-name">State</span><span class="token punctuation">::</span><span class="token constant">INNUMBER</span> <span class="token punctuation">&#123;</span>            result <span class="token operator">=</span> result <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> neg_flag <span class="token operator">*</span> c<span class="token punctuation">.</span><span class="token function">to_digit</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token keyword">i64</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> current_state <span class="token operator">==</span> <span class="token class-name">State</span><span class="token punctuation">::</span><span class="token constant">INSIGN</span> <span class="token punctuation">&#123;</span>            neg_flag <span class="token operator">=</span> <span class="token keyword">if</span> c <span class="token operator">==</span> <span class="token char">'+'</span> <span class="token punctuation">&#123;</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> result <span class="token operator">></span> <span class="token keyword">i32</span><span class="token punctuation">::</span><span class="token constant">MAX</span> <span class="token keyword">as</span> <span class="token keyword">i64</span> <span class="token operator">||</span> result <span class="token operator">&lt;</span> <span class="token keyword">i32</span><span class="token punctuation">::</span><span class="token constant">MIN</span> <span class="token keyword">as</span> <span class="token keyword">i64</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> neg_flag <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token keyword">i32</span><span class="token punctuation">::</span><span class="token constant">MAX</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> neg_flag <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token keyword">i32</span><span class="token punctuation">::</span><span class="token constant">MIN</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    result <span class="token keyword">as</span> <span class="token keyword">i32</span><span class="token punctuation">&#125;</span><span class="token attribute attr-name">#[derive(Eq, Hash, PartialEq, Clone, Copy, Debug)]</span><span class="token keyword">enum</span> <span class="token type-definition class-name">State</span> <span class="token punctuation">&#123;</span>    <span class="token constant">START</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token constant">INSIGN</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>    <span class="token constant">INNUMBER</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token constant">END</span> <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token keyword">fn</span> <span class="token function-definition function">get_state</span><span class="token punctuation">(</span>c<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">char</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">State</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> c<span class="token punctuation">.</span><span class="token function">is_ascii_whitespace</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">State</span><span class="token punctuation">::</span><span class="token constant">START</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> c<span class="token punctuation">.</span><span class="token function">is_ascii_digit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">State</span><span class="token punctuation">::</span><span class="token constant">INNUMBER</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token operator">*</span>c <span class="token operator">==</span> <span class="token char">'+'</span> <span class="token operator">||</span> <span class="token operator">*</span>c <span class="token operator">==</span> <span class="token char">'-'</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">State</span><span class="token punctuation">::</span><span class="token constant">INSIGN</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">State</span><span class="token punctuation">::</span><span class="token constant">END</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> leecode </category>
          
          <category> 字符串 </category>
          
          <category> 0008:字符串转整数(atoi) </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微信公众号:三角兽 </tag>
            
            <tag> 知识星球:Offer快来 </tag>
            
            <tag> 字符串 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>整数反转</title>
      <link href="/2024/11/24/%E6%95%B4%E6%95%B0%E5%8F%8D%E8%BD%AC/"/>
      <url>/2024/11/24/%E6%95%B4%E6%95%B0%E5%8F%8D%E8%BD%AC/</url>
      
        <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给你一个 32 位的有符号整数 x ，返回将 x 中的数字部分反转后的结果。如果反转后整数超过32位的有符号整数的范围 [−2^31,  2^31 − 1] ，就返回0。假设环境不允许存储64位整数（有符号或无符号）。</p><h3 id="示例-1："><a href="#示例-1：" class="headerlink" title="示例 1："></a>示例 1：</h3><p>输入：x &#x3D; 123<br>输出：321</p><h3 id="示例-2："><a href="#示例-2：" class="headerlink" title="示例 2："></a>示例 2：</h3><p>输入：x &#x3D; -123<br>输出：-321</p><h3 id="示例-3："><a href="#示例-3：" class="headerlink" title="示例 3："></a>示例 3：</h3><p>输入：x &#x3D; 120<br>输出：21</p><h3 id="示例-4："><a href="#示例-4：" class="headerlink" title="示例 4："></a>示例 4：</h3><p>输入：x &#x3D; 0<br>输出：0</p><h3 id="提示："><a href="#提示：" class="headerlink" title="提示："></a>提示：</h3><p>-2^31 &lt;&#x3D; x &lt;&#x3D; 2^31 - 1</p><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>不借助栈且没有i64的情况下，进行优化。利用一个技巧：res%10 !&#x3D; x%10则是发生了溢出</p><h3 id="rust代码"><a href="#rust代码" class="headerlink" title="rust代码"></a>rust代码</h3><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">fn</span> <span class="token function-definition function">reverse</span><span class="token punctuation">(</span><span class="token keyword">mut</span> x<span class="token punctuation">:</span> <span class="token keyword">i32</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token keyword">i32</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> <span class="token keyword">mut</span> result<span class="token punctuation">:</span><span class="token keyword">i32</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> x <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 为了防止溢出，进行环绕操作</span>        result <span class="token operator">=</span> result<span class="token punctuation">.</span><span class="token function">wrapping_mul</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token operator">+</span> x <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> result <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">!=</span> x <span class="token operator">%</span> <span class="token number">10</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        x <span class="token operator">/=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    result<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2024/11/24/%E6%95%B4%E6%95%B0%E5%8F%8D%E8%BD%AC/rust.png" alt="rust"></p>]]></content>
      
      
      <categories>
          
          <category> leecode </category>
          
          <category> 找规律 </category>
          
          <category> 0007:整数反转 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微信公众号:三角兽 </tag>
            
            <tag> 知识星球:Offer快来 </tag>
            
            <tag> 找规律 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Z字形变换</title>
      <link href="/2024/11/24/Z%E5%AD%97%E5%BD%A2%E5%8F%98%E6%8D%A2/"/>
      <url>/2024/11/24/Z%E5%AD%97%E5%BD%A2%E5%8F%98%E6%8D%A2/</url>
      
        <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>将一个给定字符串 s 根据给定的行数 numRows ，以从上往下、从左到右进行 Z 字形排列。<br>比如输入字符串为 “PAYPALISHIRING” 行数为 3 时，排列如下：</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token class-name">P</span>   <span class="token class-name">A</span>   <span class="token class-name">H</span>   <span class="token class-name">N</span><span class="token class-name">A</span> <span class="token class-name">P</span> <span class="token class-name">L</span> <span class="token class-name">S</span> <span class="token class-name">I</span> <span class="token class-name">I</span> <span class="token class-name">G</span><span class="token class-name">Y</span>   <span class="token class-name">I</span>   <span class="token class-name">R</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>之后，你的输出需要从左往右逐行读取，产生出一个新的字符串，比如：”PAHNAPLSIIGYIR”。<br>请你实现这个将字符串进行指定行数变换的函数：<br>string convert(string s, int numRows);</p><h3 id="示例-1："><a href="#示例-1：" class="headerlink" title="示例 1："></a>示例 1：</h3><p>输入：s &#x3D; “PAYPALISHIRING”, numRows &#x3D; 3<br>输出：”PAHNAPLSIIGYIR”</p><h3 id="示例-2："><a href="#示例-2：" class="headerlink" title="示例 2："></a>示例 2：</h3><p>输入：s &#x3D; “PAYPALISHIRING”, numRows &#x3D; 4<br>输出：”PINALSIGYAHRPI”<br>解释：</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token class-name">P</span>     <span class="token class-name">I</span>    <span class="token class-name">N</span><span class="token class-name">A</span>   <span class="token class-name">L</span> <span class="token class-name">S</span>  <span class="token class-name">I</span> <span class="token class-name">G</span><span class="token class-name">Y</span> <span class="token class-name">A</span>   <span class="token class-name">H</span> <span class="token class-name">R</span><span class="token class-name">P</span>     <span class="token class-name">I</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="示例-3："><a href="#示例-3：" class="headerlink" title="示例 3："></a>示例 3：</h3><p>输入：s &#x3D; “A”, numRows &#x3D; 1<br>输出：”A”</p><h3 id="提示："><a href="#提示：" class="headerlink" title="提示："></a>提示：</h3><p>1 &lt;&#x3D; s.length &lt;&#x3D; 1000<br>s 由英文字母（小写和大写）、’,’ 和 ‘.’ 组成<br>1 &lt;&#x3D; numRows &lt;&#x3D; 1000</p><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>告知了输入的字符串和输入的行数，可以试着找出变换后矩阵的列数。矩阵的列数如何找呢？经过观察它呈现一定的周期T，并且每个周期T会消耗2 * num_rows-2个元素，每个周期有 num_rows - 1 列，因此可以求出拥有S&#x3D;ceil(len(s) &#x2F; (2*num_rows-2))个周期，共有C &#x3D; S * (num_rows-1)列。</p><p>用暴力拆解的办法，可以先构造一个Q&#x3D;[num_rows][C]大小的矩阵，遍历填充矩阵中相应的位置，然后再按顺序取出元素拼接成结果返回即可。这种方法的时间复杂度为O(n^2),空间复杂度为o(num_row*c)。</p><p>可以在此基础上优化，矩阵的每一行有很多空格，可以进行压缩，将Q优化为[list()*num_rows]，每一行用一个动态大小的列表，元素只需要追加到列表尾部即可。优化之后的时间复杂度为O(n),空间复杂度为O(n)。</p><h3 id="rust实现"><a href="#rust实现" class="headerlink" title="rust实现"></a>rust实现</h3><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">convert</span><span class="token punctuation">(</span>s<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span> num_rows<span class="token punctuation">:</span> <span class="token keyword">i32</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">String</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> num_rows <span class="token operator">=</span> num_rows <span class="token keyword">as</span> <span class="token keyword">usize</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> len <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//周期设置为t</span>    <span class="token comment">//一个周期：t=2*num_rows-2个元素</span>    <span class="token comment">//有T = ceil(len/t)个周期</span>    <span class="token comment">//每个周期的列数num_row-1</span>    <span class="token comment">//总列数ceil(len/(2*num_rows-2))*(num_row-1)</span>    <span class="token keyword">let</span> <span class="token keyword">mut</span> results<span class="token punctuation">:</span> <span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">>></span> <span class="token operator">=</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token class-name">Vec</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> num_rows<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> len <span class="token operator">&lt;=</span> <span class="token number">1</span> <span class="token operator">||</span> len <span class="token operator">&lt;=</span> num_rows <span class="token operator">||</span> num_rows <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> s<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">let</span> t <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> num_rows <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> <span class="token keyword">mut</span> index<span class="token punctuation">:</span> <span class="token keyword">i32</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token punctuation">,</span> c<span class="token punctuation">)</span> <span class="token keyword">in</span> s<span class="token punctuation">.</span><span class="token function">char_indices</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        results<span class="token punctuation">[</span>index <span class="token keyword">as</span> <span class="token keyword">usize</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>        index <span class="token operator">+=</span> <span class="token keyword">if</span> i <span class="token operator">%</span> t <span class="token operator">&lt;</span> num_rows <span class="token operator">-</span> <span class="token number">1</span> <span class="token punctuation">&#123;</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">let</span> <span class="token keyword">mut</span> result <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> v <span class="token keyword">in</span> results <span class="token punctuation">&#123;</span>        result<span class="token punctuation">.</span><span class="token function">push_str</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">iter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">::</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">as_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2024/11/24/Z%E5%AD%97%E5%BD%A2%E5%8F%98%E6%8D%A2/rust.png" alt="rust"></p>]]></content>
      
      
      <categories>
          
          <category> leecode </category>
          
          <category> 找规律 </category>
          
          <category> 0006:Z字形变换 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微信公众号:三角兽 </tag>
            
            <tag> 知识星球:Offer快来 </tag>
            
            <tag> 找规律 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>最长回文子串</title>
      <link href="/2024/11/24/%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%90%E4%B8%B2/"/>
      <url>/2024/11/24/%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%90%E4%B8%B2/</url>
      
        <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给你一个字符串 s，找到 s 中最长的回文子串。</p><h3 id="示例-1："><a href="#示例-1：" class="headerlink" title="示例 1："></a>示例 1：</h3><p>输入：s &#x3D; “babad”<br>输出：”bab”<br>解释：”aba” 同样是符合题意的答案。</p><h3 id="示例-2："><a href="#示例-2：" class="headerlink" title="示例 2："></a>示例 2：</h3><p>输入：s &#x3D; “cbbd”<br>输出：”bb”</p><h3 id="提示："><a href="#提示：" class="headerlink" title="提示："></a>提示：</h3><p>1 &lt;&#x3D; s.length &lt;&#x3D; 1000<br>s 仅由数字和英文字母组成</p><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>这个题可以使用动态规划来解，注意观察如果一个串s[i]..s[j]是回文串,则s[i+1]..s[j-1]必定是回文串。这形成了自上而下的结构，符合动态规划的重叠子结构条件；<br>另外如果s[i+1]..s[j-1]是回文串且s[i]..s[j]也是回文串，可以找到如下的递推结构即：<br>f(i,j) &#x3D; f(i+1,j-1) &amp;&amp; s[i] &#x3D;&#x3D; s[j]。<br>这里注意边界条件，如果s长度为1，自然是回文结构，如果s长度为2且两个字符相等，也是回文结构。整理一下，有如下的递推公式：</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token function">f</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">f</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token function">f</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>i<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token function">f</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token boolean">true</span> <span class="token operator">&amp;&amp;</span> j<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> j<span class="token operator">-</span>i <span class="token operator">=</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="rust实现"><a href="#rust实现" class="headerlink" title="rust实现"></a>rust实现</h3><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">longest_palindrome</span><span class="token punctuation">(</span>s<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">String</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> len <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 动态规划二维存储</span>    <span class="token comment">// dp[i][j]表示s[i]..s[j]是回文串</span>    <span class="token keyword">let</span> <span class="token keyword">mut</span> dp <span class="token operator">=</span> <span class="token class-name">Vec</span><span class="token punctuation">::</span><span class="token function">with_capacity</span><span class="token punctuation">(</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token number">0</span><span class="token punctuation">..</span>len <span class="token punctuation">&#123;</span>        dp<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token class-name">Vec</span><span class="token punctuation">::</span><span class="token function">with_capacity</span><span class="token punctuation">(</span>len<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> len <span class="token operator">&lt;</span> <span class="token number">2</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> s<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 初始化边界条件，长度为1的都为回文串</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token number">0</span><span class="token punctuation">..</span>len <span class="token punctuation">&#123;</span>        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">let</span> chars <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">chars</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">::</span><span class="token operator">&lt;</span><span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">>></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> <span class="token keyword">mut</span> max_len <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> <span class="token keyword">mut</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">// 从长度=2开始</span>    <span class="token keyword">for</span> length <span class="token keyword">in</span> <span class="token number">2</span><span class="token punctuation">..=</span>len <span class="token punctuation">&#123;</span>        <span class="token comment">// 左边界为i 右边界为j-i+1=length</span>        <span class="token comment">// j = length + i -1</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token number">0</span><span class="token punctuation">..</span>len <span class="token punctuation">&#123;</span>            <span class="token keyword">let</span> j <span class="token operator">=</span> length <span class="token operator">+</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> j <span class="token operator">>=</span> len <span class="token punctuation">&#123;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">// s[i][j]</span>            <span class="token keyword">if</span> chars<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> chars<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token punctuation">&#123;</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> j <span class="token operator">-</span> i <span class="token operator">&lt;=</span> <span class="token number">2</span> <span class="token punctuation">&#123;</span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">if</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> j <span class="token operator">-</span> i <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">></span> max_len <span class="token punctuation">&#123;</span>                    max_len <span class="token operator">=</span> j <span class="token operator">-</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>                    index <span class="token operator">=</span> i<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    s<span class="token punctuation">[</span>index<span class="token punctuation">..</span>index <span class="token operator">+</span> max_len<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2024/11/24/%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%90%E4%B8%B2/rust.png" alt="rust"></p><p>上面的算法时间复杂度为O(n^2),有一种时间复杂度为O(n)的算法：Manacher算法，但实现过于复杂，感兴趣可以搜索了解。</p>]]></content>
      
      
      <categories>
          
          <category> leecode </category>
          
          <category> 动态规划 </category>
          
          <category> 0005:最长回文子串 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微信公众号:三角兽 </tag>
            
            <tag> 知识星球:Offer快来 </tag>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>寻找两个正序数组的中位数</title>
      <link href="/2024/11/24/%E5%AF%BB%E6%89%BE%E4%B8%A4%E4%B8%AA%E6%AD%A3%E5%BA%8F%E6%95%B0%E7%BB%84%E7%9A%84%E4%B8%AD%E4%BD%8D%E6%95%B0/"/>
      <url>/2024/11/24/%E5%AF%BB%E6%89%BE%E4%B8%A4%E4%B8%AA%E6%AD%A3%E5%BA%8F%E6%95%B0%E7%BB%84%E7%9A%84%E4%B8%AD%E4%BD%8D%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定两个大小分别为 m 和 n 的正序（从小到大）数组 nums1 和 nums2。请你找出并返回这两个正序数组的 中位数 。<br>算法的时间复杂度应该为 O(log (m+n))</p><h3 id="示例-1："><a href="#示例-1：" class="headerlink" title="示例 1："></a>示例 1：</h3><p>输入：nums1 &#x3D; [1,3], nums2 &#x3D; [2]<br>输出：2.00000<br>解释：合并数组 &#x3D; [1,2,3] ，中位数 2</p><h3 id="示例-2："><a href="#示例-2：" class="headerlink" title="示例 2："></a>示例 2：</h3><p>输入：nums1 &#x3D; [1,2], nums2 &#x3D; [3,4]<br>输出：2.50000<br>解释：合并数组 &#x3D; [1,2,3,4] ，中位数 (2 + 3) &#x2F; 2 &#x3D; 2.5</p><h3 id="提示："><a href="#提示：" class="headerlink" title="提示："></a>提示：</h3><p>nums1.length &#x3D;&#x3D; m<br>nums2.length &#x3D;&#x3D; n<br>0 &lt;&#x3D; m &lt;&#x3D; 1000<br>0 &lt;&#x3D; n &lt;&#x3D; 1000<br>1 &lt;&#x3D; m + n &lt;&#x3D; 2000<br>-106 &lt;&#x3D; nums1[i], nums2[i] &lt;&#x3D; 106</p><h3 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h3><p>两个链表合并成一个大的链表，基于链表排序，排序算法时间复杂度O(log(n+m))</p><h3 id="rust实现"><a href="#rust实现" class="headerlink" title="rust实现"></a>rust实现</h3><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">find_median_sorted_arrays</span><span class="token punctuation">(</span><span class="token keyword">mut</span> nums1<span class="token punctuation">:</span> <span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token keyword">i32</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token keyword">mut</span> nums2<span class="token punctuation">:</span> <span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token keyword">i32</span><span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token keyword">f64</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> len <span class="token operator">=</span> nums1<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> nums2<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> <span class="token keyword">mut</span> datas <span class="token operator">=</span> <span class="token class-name">Vec</span><span class="token punctuation">::</span><span class="token function">with_capacity</span><span class="token punctuation">(</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>    datas<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>nums1<span class="token punctuation">.</span><span class="token function">as_mut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    datas<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>nums2<span class="token punctuation">.</span><span class="token function">as_mut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    datas<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> len <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">&#123;</span>        datas<span class="token punctuation">[</span>len <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token keyword">as</span> <span class="token keyword">f64</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token punctuation">(</span>datas<span class="token punctuation">[</span>len <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> datas<span class="token punctuation">[</span>len <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token keyword">f64</span> <span class="token operator">/</span> <span class="token number">2.0</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2024/11/24/%E5%AF%BB%E6%89%BE%E4%B8%A4%E4%B8%AA%E6%AD%A3%E5%BA%8F%E6%95%B0%E7%BB%84%E7%9A%84%E4%B8%AD%E4%BD%8D%E6%95%B0/rust.png" alt="rust"></p>]]></content>
      
      
      <categories>
          
          <category> leecode </category>
          
          <category> 二分 </category>
          
          <category> 0004:寻找两个正序数组的中位数 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微信公众号:三角兽 </tag>
            
            <tag> 知识星球:Offer快来 </tag>
            
            <tag> 二分 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>无重最长子串</title>
      <link href="/2024/11/23/%E6%97%A0%E9%87%8D%E6%9C%80%E9%95%BF%E5%AD%90%E4%B8%B2/"/>
      <url>/2024/11/23/%E6%97%A0%E9%87%8D%E6%9C%80%E9%95%BF%E5%AD%90%E4%B8%B2/</url>
      
        <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一个字符串 s ，请你找出其中不含有重复字符的最长子串的长度</p><h3 id="示例-1"><a href="#示例-1" class="headerlink" title="示例 1:"></a>示例 1:</h3><p>输入: s &#x3D; “abcabcbb”<br>输出: 3<br>解释: 因为无重复字符的最长子串是 “abc”，所以其长度为 3。</p><h3 id="示例-2"><a href="#示例-2" class="headerlink" title="示例 2:"></a>示例 2:</h3><p>输入: s &#x3D; “bbbbb”<br>输出: 1<br>解释: 因为无重复字符的最长子串是 “b”，所以其长度为 1。</p><h3 id="示例-3"><a href="#示例-3" class="headerlink" title="示例 3:"></a>示例 3:</h3><p>输入: s &#x3D; “pwwkew”<br>输出: 3<br>解释: 因为无重复字符的最长子串是 “wke”，所以其长度为 3。请注意，你的答案必须是 子串 的长度，”pwke” 是一个子序列，不是子串。</p><h3 id="提示："><a href="#提示：" class="headerlink" title="提示："></a>提示：</h3><p>0 &lt;&#x3D; s.length &lt;&#x3D; 5 * 104<br>s 由英文字母、数字、符号和空格组成</p><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>采用滑动窗口，定义窗口左右边界分别为l,r，用一个map维护窗口中已有的字符，逐个比较字符，移动窗口，找出最大的值。时间复杂度为O(n*m),m为不重复子串平均长度。<br>可以记录下最大取值时的左右边界，便于返回最长子串(题意没有这样要求，可以自行扩展)</p><h3 id="rust实现"><a href="#rust实现" class="headerlink" title="rust实现"></a>rust实现</h3><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">length_of_longest_substring</span><span class="token punctuation">(</span>s<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token keyword">i32</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> s<span class="token punctuation">.</span><span class="token function">is_empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">let</span> <span class="token keyword">mut</span> map<span class="token punctuation">:</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token punctuation">,</span> <span class="token keyword">usize</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token class-name">HashMap</span><span class="token punctuation">::</span><span class="token function">with_capacity</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> <span class="token punctuation">(</span><span class="token keyword">mut</span> l<span class="token punctuation">,</span> <span class="token keyword">mut</span> r<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> <span class="token keyword">mut</span> max_length <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> <span class="token keyword">mut</span> max_l_r <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> chars <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">chars</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">::</span><span class="token operator">&lt;</span><span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">>></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> len <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> r <span class="token operator">&lt;</span> len <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> map<span class="token punctuation">.</span><span class="token function">contains_key</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>chars<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">let</span> t_len <span class="token operator">=</span> r <span class="token operator">-</span> l<span class="token punctuation">;</span>            <span class="token keyword">if</span> t_len <span class="token operator">></span> max_length <span class="token punctuation">&#123;</span>                max_length <span class="token operator">=</span> t_len<span class="token punctuation">;</span>                max_l_r <span class="token operator">=</span> <span class="token punctuation">(</span>l<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">let</span> tr <span class="token operator">=</span> <span class="token operator">*</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>chars<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> l<span class="token punctuation">..=</span>tr <span class="token punctuation">&#123;</span>                map<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>chars<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            map<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>chars<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>            l <span class="token operator">=</span> tr <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            map<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>chars<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"&#123;&#125;"</span><span class="token punctuation">,</span> chars<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        r <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token comment">//println!("&#123;:?&#125; &#123;l&#125; &#123;r&#125;",map);</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> r <span class="token operator">!=</span> l <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> t_len <span class="token operator">=</span> r <span class="token operator">-</span> l<span class="token punctuation">;</span>        <span class="token keyword">if</span> t_len <span class="token operator">></span> max_length <span class="token punctuation">&#123;</span>            max_length <span class="token operator">=</span> t_len<span class="token punctuation">;</span>            max_l_r <span class="token operator">=</span> <span class="token punctuation">(</span>l<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//println!("&#123;l&#125; &#123;r&#125; &#123;:?&#125;", &amp;s[max_l_r.0..max_l_r.1]);</span>    max_length <span class="token keyword">as</span> <span class="token keyword">i32</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2024/11/23/%E6%97%A0%E9%87%8D%E6%9C%80%E9%95%BF%E5%AD%90%E4%B8%B2/rust.png" alt="rust"></p><h3 id="rust代码优化"><a href="#rust代码优化" class="headerlink" title="rust代码优化"></a>rust代码优化</h3><p>通过hashmap直接更新left边界，一次遍历，找到最长无重子串。时间复杂度O(n)。</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">length_of_longest_substring</span><span class="token punctuation">(</span>s<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token keyword">i32</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> <span class="token keyword">mut</span> map<span class="token punctuation">:</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token punctuation">,</span> <span class="token keyword">usize</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token class-name">HashMap</span><span class="token punctuation">::</span><span class="token function">with_capacity</span><span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> chars <span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">chars</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">::</span><span class="token operator">&lt;</span><span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">>></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> <span class="token keyword">mut</span> left<span class="token punctuation">:</span><span class="token keyword">i32</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> len <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> <span class="token keyword">mut</span> max_length<span class="token punctuation">:</span><span class="token keyword">i32</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> i  <span class="token keyword">in</span> <span class="token number">0</span><span class="token punctuation">..</span>len<span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> map<span class="token punctuation">.</span><span class="token function">contains_key</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>chars<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            left <span class="token operator">=</span> left<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token operator">*</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>chars<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token keyword">i32</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>         map<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>chars<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>         max_length <span class="token operator">=</span> max_length<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>i <span class="token keyword">as</span> <span class="token keyword">i32</span><span class="token operator">-</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    max_length <span class="token keyword">as</span> <span class="token keyword">i32</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2024/11/23/%E6%97%A0%E9%87%8D%E6%9C%80%E9%95%BF%E5%AD%90%E4%B8%B2/rust2.png" alt="rust"></p><h3 id="python3-实现"><a href="#python3-实现" class="headerlink" title="python3 实现"></a>python3 实现</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> leecode </category>
          
          <category> 滑动窗口 </category>
          
          <category> 0003:无重复字符的最长子串 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微信公众号:三角兽 </tag>
            
            <tag> 知识星球:Offer快来 </tag>
            
            <tag> 滑动窗口 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>两数相加</title>
      <link href="/2024/11/23/%E4%B8%A4%E6%95%B0%E7%9B%B8%E5%8A%A0/"/>
      <url>/2024/11/23/%E4%B8%A4%E6%95%B0%E7%9B%B8%E5%8A%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="题目："><a href="#题目：" class="headerlink" title="题目："></a>题目：</h2><p>给你两个 非空 的链表，表示两个非负的整数。它们每位数字都是按照 逆序 的方式存储的，并且每个节点只能存储 一位 数字。</p><p>请你将两个数相加，并以相同形式返回一个表示和的链表。</p><p>你可以假设除了数字 0 之外，这两个数都不会以 0 开头。</p><p><img src="/2024/11/23/%E4%B8%A4%E6%95%B0%E7%9B%B8%E5%8A%A0/add_two_nums.jpg"></p><h3 id="示例1"><a href="#示例1" class="headerlink" title="示例1"></a>示例1</h3><p>输入：l1 &#x3D; [2,4,3], l2 &#x3D; [5,6,4]<br>输出：[7,0,8]<br>解释：342 + 465 &#x3D; 807.</p><h3 id="示例-2："><a href="#示例-2：" class="headerlink" title="示例 2："></a>示例 2：</h3><p>输入：l1 &#x3D; [0], l2 &#x3D; [0]<br>输出：[0]<br>示例 3：</p><p>输入：l1 &#x3D; [9,9,9,9,9,9,9], l2 &#x3D; [9,9,9,9]<br>输出：[8,9,9,9,0,0,0,1]</p><h3 id="提示："><a href="#提示：" class="headerlink" title="提示："></a>提示：</h3><p>每个链表中的节点数在范围 [1, 100] 内<br>0 &lt;&#x3D; Node.val &lt;&#x3D; 9<br>题目数据保证列表表示的数字不含前导零</p><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>遍历链表，按位加和，如果有进位，则需要加上进位。</p><h3 id="rust代码"><a href="#rust代码" class="headerlink" title="rust代码"></a>rust代码</h3><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">add_two_numbers</span><span class="token punctuation">(</span>    <span class="token keyword">mut</span> l1<span class="token punctuation">:</span> <span class="token class-name">Option</span><span class="token operator">&lt;</span><span class="token class-name">Box</span><span class="token operator">&lt;</span><span class="token class-name">ListNode</span><span class="token operator">>></span><span class="token punctuation">,</span>    <span class="token keyword">mut</span> l2<span class="token punctuation">:</span> <span class="token class-name">Option</span><span class="token operator">&lt;</span><span class="token class-name">Box</span><span class="token operator">&lt;</span><span class="token class-name">ListNode</span><span class="token operator">>></span><span class="token punctuation">,</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Option</span><span class="token operator">&lt;</span><span class="token class-name">Box</span><span class="token operator">&lt;</span><span class="token class-name">ListNode</span><span class="token operator">>></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> <span class="token keyword">mut</span> head <span class="token operator">=</span> <span class="token class-name">Box</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> <span class="token keyword">mut</span> tail <span class="token operator">=</span> head<span class="token punctuation">.</span><span class="token function">as_mut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> <span class="token keyword">mut</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> <span class="token keyword">mut</span> carray <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> l1<span class="token punctuation">.</span><span class="token function">is_some</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> l2<span class="token punctuation">.</span><span class="token function">is_some</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> l1<span class="token punctuation">.</span><span class="token function">is_some</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            sum <span class="token operator">+=</span> l1<span class="token punctuation">.</span><span class="token function">as_ref</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>val<span class="token punctuation">;</span>            l1 <span class="token operator">=</span> l1<span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> l2<span class="token punctuation">.</span><span class="token function">is_some</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            sum <span class="token operator">+=</span> l2<span class="token punctuation">.</span><span class="token function">as_ref</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>val<span class="token punctuation">;</span>            l2 <span class="token operator">=</span> l2<span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        sum <span class="token operator">+=</span> carray<span class="token punctuation">;</span>        carray <span class="token operator">=</span> sum <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">;</span>        sum <span class="token operator">=</span> sum <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> node <span class="token operator">=</span> <span class="token class-name">ListNode</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span>        sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        tail<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token class-name">Some</span><span class="token punctuation">(</span><span class="token class-name">Box</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        tail <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token operator">*</span>tail<span class="token punctuation">.</span>next<span class="token punctuation">.</span><span class="token function">as_mut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> carray <span class="token operator">></span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> tmp <span class="token operator">=</span> <span class="token class-name">ListNode</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span>carray<span class="token punctuation">)</span><span class="token punctuation">;</span>        tail<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token class-name">Some</span><span class="token punctuation">(</span><span class="token class-name">Box</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    head<span class="token punctuation">.</span>next<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2024/11/23/%E4%B8%A4%E6%95%B0%E7%9B%B8%E5%8A%A0/rust.png"></p><h3 id="python-代码"><a href="#python-代码" class="headerlink" title="python 代码"></a>python 代码</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">addTwoNumbers</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> l1<span class="token punctuation">:</span> Optional<span class="token punctuation">[</span>ListNode<span class="token punctuation">]</span><span class="token punctuation">,</span> l2<span class="token punctuation">:</span> Optional<span class="token punctuation">[</span>ListNode<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> Optional<span class="token punctuation">[</span>ListNode<span class="token punctuation">]</span><span class="token punctuation">:</span>    head <span class="token operator">=</span> ListNode<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    cusor <span class="token operator">=</span> head    sums <span class="token operator">=</span> <span class="token number">0</span>    carry <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">while</span> l1 <span class="token keyword">or</span> l2<span class="token punctuation">:</span>        <span class="token keyword">if</span> l1<span class="token punctuation">:</span>            sums <span class="token operator">+=</span> l1<span class="token punctuation">.</span>val            l1 <span class="token operator">=</span> l1<span class="token punctuation">.</span><span class="token builtin">next</span>        <span class="token keyword">if</span> l2<span class="token punctuation">:</span>            sums <span class="token operator">+=</span> l2<span class="token punctuation">.</span>val            l2 <span class="token operator">=</span> l2<span class="token punctuation">.</span><span class="token builtin">next</span>        sums <span class="token operator">+=</span> carry        carry <span class="token operator">=</span> sums <span class="token operator">//</span> <span class="token number">10</span>        sums <span class="token operator">%=</span> <span class="token number">10</span>        cusor<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> ListNode<span class="token punctuation">(</span>val<span class="token operator">=</span>sums<span class="token punctuation">)</span>        cusor <span class="token operator">=</span> cusor<span class="token punctuation">.</span><span class="token builtin">next</span>        sums <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">if</span> carry <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>        cusor<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> ListNode<span class="token punctuation">(</span>val<span class="token operator">=</span>carry<span class="token punctuation">)</span>    <span class="token keyword">return</span> head<span class="token punctuation">.</span><span class="token builtin">next</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2024/11/23/%E4%B8%A4%E6%95%B0%E7%9B%B8%E5%8A%A0/python.png"></p>]]></content>
      
      
      <categories>
          
          <category> leecode </category>
          
          <category> 链表 </category>
          
          <category> 0002:两数相加 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微信公众号:三角兽 </tag>
            
            <tag> 知识星球:Offer快来 </tag>
            
            <tag> 链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>跳楼梯</title>
      <link href="/2024/11/20/%E8%B7%B3%E6%A5%BC%E6%A2%AF/"/>
      <url>/2024/11/20/%E8%B7%B3%E6%A5%BC%E6%A2%AF/</url>
      
        <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>假设你正在爬楼梯。需要 n 阶你才能到达楼顶。<br>每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？</p><h3 id="示例-1："><a href="#示例-1：" class="headerlink" title="示例 1："></a>示例 1：</h3><p>输入：n &#x3D; 2<br>输出：2<br>解释：有两种方法可以爬到楼顶。</p><ol><li>1 阶 + 1 阶</li><li>2 阶<br>示例 2：</li></ol><p>输入：n &#x3D; 3<br>输出：3<br>解释：有三种方法可以爬到楼顶。</p><ol><li>1 阶 + 1 阶 + 1 阶</li><li>1 阶 + 2 阶</li><li>2 阶 + 1 阶</li></ol><h3 id="提示："><a href="#提示：" class="headerlink" title="提示："></a>提示：</h3><p>1 &lt;&#x3D; n &lt;&#x3D; 45</p><h3 id="解体思路"><a href="#解体思路" class="headerlink" title="解体思路"></a>解体思路</h3><p>这是一道经典的动态规划题目，满足动态规划的四大条件：</p><ul><li>重叠子问题</li><li>最优子结构</li><li>有边界状态且状态满足无后效性</li><li>有递推公式</li></ul><p>递推公式：</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust">跳到第i格两种方式，首先跳到i<span class="token operator">-</span><span class="token number">1</span>格，下一次跳一格为第一种方式；跳到i<span class="token operator">-</span><span class="token number">2</span>格，下一次跳两格为第二种方式。跳到第i格可以分解为这两个子问题并求和。<span class="token class-name">F</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token class-name">F</span><span class="token punctuation">(</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token class-name">F</span><span class="token punctuation">(</span>i<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token class-name">F</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token class-name">F</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>表示跳到第i阶楼梯的方法数<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>基于递推公式可以考虑使用dp[i+1]长度的数组存储递推过程中的状态，自下而上完成计算。</p><h3 id="rust代码"><a href="#rust代码" class="headerlink" title="rust代码"></a>rust代码</h3><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">climb_stairs</span><span class="token punctuation">(</span>n<span class="token punctuation">:</span> <span class="token keyword">i32</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token keyword">i32</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> n <span class="token operator">=</span> n <span class="token keyword">as</span> <span class="token keyword">usize</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> <span class="token keyword">mut</span> dp <span class="token operator">=</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> n <span class="token operator">>=</span> <span class="token number">1</span> <span class="token punctuation">&#123;</span>        dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> n <span class="token operator">>=</span> <span class="token number">2</span> <span class="token punctuation">&#123;</span>        dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> n <span class="token operator">>=</span> <span class="token number">3</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token number">3</span><span class="token punctuation">..=</span>n <span class="token punctuation">&#123;</span>            dp<span class="token punctuation">[</span>i <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span><span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">+</span> dp<span class="token punctuation">[</span><span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    dp<span class="token punctuation">[</span>n <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2024/11/20/%E8%B7%B3%E6%A5%BC%E6%A2%AF/rust.png" alt="rust"></p><h3 id="python3代码"><a href="#python3代码" class="headerlink" title="python3代码"></a>python3代码</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">climbStairs</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">int</span><span class="token punctuation">:</span>        dp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span>        <span class="token keyword">if</span> n <span class="token operator">>=</span> <span class="token number">1</span><span class="token punctuation">:</span>            dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>        <span class="token keyword">if</span> n <span class="token operator">>=</span> <span class="token number">2</span><span class="token punctuation">:</span>            dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            dp<span class="token punctuation">[</span>i <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span><span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">+</span> dp<span class="token punctuation">[</span><span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">]</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>n <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2024/11/20/%E8%B7%B3%E6%A5%BC%E6%A2%AF/python3.png" alt="python"></p>]]></content>
      
      
      <categories>
          
          <category> leecode </category>
          
          <category> 动态规划 </category>
          
          <category> 0070:跳楼梯 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微信公众号:三角兽 </tag>
            
            <tag> 知识星球:Offer快来 </tag>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>两数之和</title>
      <link href="/2024/11/20/%E4%B8%A4%E6%95%B0%E5%92%8C/"/>
      <url>/2024/11/20/%E4%B8%A4%E6%95%B0%E5%92%8C/</url>
      
        <content type="html"><![CDATA[<h2 id="题目："><a href="#题目：" class="headerlink" title="题目："></a>题目：</h2><p>给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出 和为目标值 target  的那 两个 整数，并返回它们的数组下标。你可以假设每种输入只会对应一个答案，并且你不能使用两次相同的元素。<br>你可以按任意顺序返回答案。</p><h3 id="示例-1："><a href="#示例-1：" class="headerlink" title="示例 1："></a>示例 1：</h3><p>输入：nums &#x3D; [2,7,11,15], target &#x3D; 9<br>输出：[0,1]<br>解释：因为 nums[0] + nums[1] &#x3D;&#x3D; 9 ，返回 [0, 1] 。</p><h3 id="示例-2："><a href="#示例-2：" class="headerlink" title="示例 2："></a>示例 2：</h3><p>输入：nums &#x3D; [3,2,4], target &#x3D; 6<br>输出：[1,2]</p><h3 id="示例-3："><a href="#示例-3：" class="headerlink" title="示例 3："></a>示例 3：</h3><p>输入：nums &#x3D; [3,3], target &#x3D; 6<br>输出：[0,1]</p><h3 id="提示："><a href="#提示：" class="headerlink" title="提示："></a>提示：</h3><p>2 &lt;&#x3D; nums.length &lt;&#x3D; 104<br>-109 &lt;&#x3D; nums[i] &lt;&#x3D; 109<br>-109 &lt;&#x3D; target &lt;&#x3D; 109<br>只会存在一个有效答案</p><h3 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h3><p>1.双循环，时间复杂度O(n^2)<br>2.单循环+hashmap，时间复杂度O(nlogn)</p><p>满足条件即可退出循环</p><h3 id="rust-code"><a href="#rust-code" class="headerlink" title="rust code:"></a>rust code:</h3><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">fn</span> <span class="token function-definition function">two_sum</span><span class="token punctuation">(</span>nums<span class="token punctuation">:</span> <span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token keyword">i32</span><span class="token operator">></span><span class="token punctuation">,</span> target<span class="token punctuation">:</span> <span class="token keyword">i32</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token keyword">i32</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> <span class="token keyword">mut</span> map<span class="token punctuation">:</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token keyword">i32</span><span class="token punctuation">,</span> <span class="token keyword">i32</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token class-name">HashMap</span><span class="token punctuation">::</span><span class="token function">with_capacity</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token number">0</span><span class="token punctuation">..</span>nums<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> other <span class="token operator">=</span> target <span class="token operator">-</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> map<span class="token punctuation">.</span><span class="token function">contains_key</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>other<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token operator">*</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>other<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>i <span class="token keyword">as</span> <span class="token keyword">i32</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token operator">!</span>map<span class="token punctuation">.</span><span class="token function">contains_key</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      map<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> i <span class="token keyword">as</span> <span class="token keyword">i32</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2024/11/20/%E4%B8%A4%E6%95%B0%E5%92%8C/rust.png" alt="Rust"></p><h3 id="python3-code"><a href="#python3-code" class="headerlink" title="python3 code:"></a>python3 code:</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> typing <span class="token keyword">import</span> List<span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">twoSum</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">,</span> target<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        mapping <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            other <span class="token operator">=</span> target <span class="token operator">-</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span>            <span class="token keyword">if</span> mapping<span class="token punctuation">.</span>get<span class="token punctuation">(</span>other<span class="token punctuation">)</span> <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token punctuation">[</span>mapping<span class="token punctuation">.</span>get<span class="token punctuation">(</span>other<span class="token punctuation">)</span><span class="token punctuation">,</span> i<span class="token punctuation">]</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                mapping<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> i        <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2024/11/20/%E4%B8%A4%E6%95%B0%E5%92%8C/rust.png" alt="Python3"></p>]]></content>
      
      
      <categories>
          
          <category> leecode </category>
          
          <category> 数组 </category>
          
          <category> 0001:两数之和 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数组 </tag>
            
            <tag> 微信公众号:三角兽 </tag>
            
            <tag> 知识星球:Offer快来 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
